
HC05_Slave_LAB54.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003568  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003674  08003674  00013674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036c0  080036c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080036c0  080036c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036c0  080036c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036c0  080036c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036c4  080036c4  000136c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080036d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080036d4  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac7c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bd6  00000000  00000000  0002acb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c58  00000000  00000000  0002c888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  0002d4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000170fb  00000000  00000000  0002e028  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bfef  00000000  00000000  00045123  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000861c3  00000000  00000000  00051112  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d72d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033ac  00000000  00000000  000d7350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800365c 	.word	0x0800365c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800365c 	.word	0x0800365c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_Init+0x28>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <HAL_Init+0x28>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f945 	bl	8000bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093e:	2000      	movs	r0, #0
 8000940:	f000 f808 	bl	8000954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000944:	f002 fd2c 	bl	80033a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40022000 	.word	0x40022000

08000954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x54>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x58>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	fbb3 f3f1 	udiv	r3, r3, r1
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f95d 	bl	8000c32 <HAL_SYSTICK_Config>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e00e      	b.n	80009a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d80a      	bhi.n	800099e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f000 f925 	bl	8000bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_InitTick+0x5c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000004 	.word	0x20000004
 80009b0:	20000000 	.word	0x20000000

080009b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_IncTick+0x1c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_IncTick+0x20>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <HAL_IncTick+0x20>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	20000004 	.word	0x20000004
 80009d4:	20000034 	.word	0x20000034

080009d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <HAL_GetTick+0x10>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	20000034 	.word	0x20000034

080009ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f4:	f7ff fff0 	bl	80009d8 <HAL_GetTick>
 80009f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a04:	d005      	beq.n	8000a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_Delay+0x40>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a12:	bf00      	nop
 8000a14:	f7ff ffe0 	bl	80009d8 <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d8f7      	bhi.n	8000a14 <HAL_Delay+0x28>
  {
  }
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000004 	.word	0x20000004

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4906      	ldr	r1, [pc, #24]	; (8000ac8 <__NVIC_EnableIRQ+0x34>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	; (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	; (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	; 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
         );
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	; 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b94:	d301      	bcc.n	8000b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00f      	b.n	8000bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <SysTick_Config+0x40>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f7ff ff90 	bl	8000acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <SysTick_Config+0x40>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <SysTick_Config+0x40>)
 8000bb4:	2207      	movs	r2, #7
 8000bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	e000e010 	.word	0xe000e010

08000bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff2d 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf0:	f7ff ff42 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	6978      	ldr	r0, [r7, #20]
 8000bfc:	f7ff ff90 	bl	8000b20 <NVIC_EncodePriority>
 8000c00:	4602      	mov	r2, r0
 8000c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff5f 	bl	8000acc <__NVIC_SetPriority>
}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff35 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffa2 	bl	8000b84 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d005      	beq.n	8000c6e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2204      	movs	r2, #4
 8000c66:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e051      	b.n	8000d12 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 020e 	bic.w	r2, r2, #14
 8000c7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f022 0201 	bic.w	r2, r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a22      	ldr	r2, [pc, #136]	; (8000d1c <HAL_DMA_Abort_IT+0xd0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d029      	beq.n	8000cec <HAL_DMA_Abort_IT+0xa0>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a20      	ldr	r2, [pc, #128]	; (8000d20 <HAL_DMA_Abort_IT+0xd4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d022      	beq.n	8000ce8 <HAL_DMA_Abort_IT+0x9c>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <HAL_DMA_Abort_IT+0xd8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d01a      	beq.n	8000ce2 <HAL_DMA_Abort_IT+0x96>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <HAL_DMA_Abort_IT+0xdc>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d012      	beq.n	8000cdc <HAL_DMA_Abort_IT+0x90>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <HAL_DMA_Abort_IT+0xe0>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d00a      	beq.n	8000cd6 <HAL_DMA_Abort_IT+0x8a>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <HAL_DMA_Abort_IT+0xe4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d102      	bne.n	8000cd0 <HAL_DMA_Abort_IT+0x84>
 8000cca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cce:	e00e      	b.n	8000cee <HAL_DMA_Abort_IT+0xa2>
 8000cd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cd4:	e00b      	b.n	8000cee <HAL_DMA_Abort_IT+0xa2>
 8000cd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cda:	e008      	b.n	8000cee <HAL_DMA_Abort_IT+0xa2>
 8000cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce0:	e005      	b.n	8000cee <HAL_DMA_Abort_IT+0xa2>
 8000ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce6:	e002      	b.n	8000cee <HAL_DMA_Abort_IT+0xa2>
 8000ce8:	2310      	movs	r3, #16
 8000cea:	e000      	b.n	8000cee <HAL_DMA_Abort_IT+0xa2>
 8000cec:	2301      	movs	r3, #1
 8000cee:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <HAL_DMA_Abort_IT+0xe8>)
 8000cf0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	4798      	blx	r3
    } 
  }
  return status;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40020008 	.word	0x40020008
 8000d20:	4002001c 	.word	0x4002001c
 8000d24:	40020030 	.word	0x40020030
 8000d28:	40020044 	.word	0x40020044
 8000d2c:	40020058 	.word	0x40020058
 8000d30:	4002006c 	.word	0x4002006c
 8000d34:	40020000 	.word	0x40020000

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b08b      	sub	sp, #44	; 0x2c
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	e127      	b.n	8000f9c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 8116 	bne.w	8000f96 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b12      	cmp	r3, #18
 8000d70:	d034      	beq.n	8000ddc <HAL_GPIO_Init+0xa4>
 8000d72:	2b12      	cmp	r3, #18
 8000d74:	d80d      	bhi.n	8000d92 <HAL_GPIO_Init+0x5a>
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d02b      	beq.n	8000dd2 <HAL_GPIO_Init+0x9a>
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d804      	bhi.n	8000d88 <HAL_GPIO_Init+0x50>
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d031      	beq.n	8000de6 <HAL_GPIO_Init+0xae>
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d01c      	beq.n	8000dc0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d86:	e048      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d043      	beq.n	8000e14 <HAL_GPIO_Init+0xdc>
 8000d8c:	2b11      	cmp	r3, #17
 8000d8e:	d01b      	beq.n	8000dc8 <HAL_GPIO_Init+0x90>
          break;
 8000d90:	e043      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d92:	4a89      	ldr	r2, [pc, #548]	; (8000fb8 <HAL_GPIO_Init+0x280>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d026      	beq.n	8000de6 <HAL_GPIO_Init+0xae>
 8000d98:	4a87      	ldr	r2, [pc, #540]	; (8000fb8 <HAL_GPIO_Init+0x280>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d806      	bhi.n	8000dac <HAL_GPIO_Init+0x74>
 8000d9e:	4a87      	ldr	r2, [pc, #540]	; (8000fbc <HAL_GPIO_Init+0x284>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d020      	beq.n	8000de6 <HAL_GPIO_Init+0xae>
 8000da4:	4a86      	ldr	r2, [pc, #536]	; (8000fc0 <HAL_GPIO_Init+0x288>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01d      	beq.n	8000de6 <HAL_GPIO_Init+0xae>
          break;
 8000daa:	e036      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dac:	4a85      	ldr	r2, [pc, #532]	; (8000fc4 <HAL_GPIO_Init+0x28c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d019      	beq.n	8000de6 <HAL_GPIO_Init+0xae>
 8000db2:	4a85      	ldr	r2, [pc, #532]	; (8000fc8 <HAL_GPIO_Init+0x290>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d016      	beq.n	8000de6 <HAL_GPIO_Init+0xae>
 8000db8:	4a84      	ldr	r2, [pc, #528]	; (8000fcc <HAL_GPIO_Init+0x294>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d013      	beq.n	8000de6 <HAL_GPIO_Init+0xae>
          break;
 8000dbe:	e02c      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e028      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	623b      	str	r3, [r7, #32]
          break;
 8000dd0:	e023      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	3308      	adds	r3, #8
 8000dd8:	623b      	str	r3, [r7, #32]
          break;
 8000dda:	e01e      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	330c      	adds	r3, #12
 8000de2:	623b      	str	r3, [r7, #32]
          break;
 8000de4:	e019      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d102      	bne.n	8000df4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dee:	2304      	movs	r3, #4
 8000df0:	623b      	str	r3, [r7, #32]
          break;
 8000df2:	e012      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d105      	bne.n	8000e08 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69fa      	ldr	r2, [r7, #28]
 8000e04:	611a      	str	r2, [r3, #16]
          break;
 8000e06:	e008      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69fa      	ldr	r2, [r7, #28]
 8000e10:	615a      	str	r2, [r3, #20]
          break;
 8000e12:	e002      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
          break;
 8000e18:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	2bff      	cmp	r3, #255	; 0xff
 8000e1e:	d801      	bhi.n	8000e24 <HAL_GPIO_Init+0xec>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	e001      	b.n	8000e28 <HAL_GPIO_Init+0xf0>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3304      	adds	r3, #4
 8000e28:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	2bff      	cmp	r3, #255	; 0xff
 8000e2e:	d802      	bhi.n	8000e36 <HAL_GPIO_Init+0xfe>
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x104>
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	3b08      	subs	r3, #8
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	210f      	movs	r1, #15
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	6a39      	ldr	r1, [r7, #32]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	431a      	orrs	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 8096 	beq.w	8000f96 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6a:	4b59      	ldr	r3, [pc, #356]	; (8000fd0 <HAL_GPIO_Init+0x298>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4a58      	ldr	r2, [pc, #352]	; (8000fd0 <HAL_GPIO_Init+0x298>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6193      	str	r3, [r2, #24]
 8000e76:	4b56      	ldr	r3, [pc, #344]	; (8000fd0 <HAL_GPIO_Init+0x298>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e82:	4a54      	ldr	r2, [pc, #336]	; (8000fd4 <HAL_GPIO_Init+0x29c>)
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	3302      	adds	r3, #2
 8000e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	220f      	movs	r2, #15
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4b      	ldr	r2, [pc, #300]	; (8000fd8 <HAL_GPIO_Init+0x2a0>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0x19e>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4a      	ldr	r2, [pc, #296]	; (8000fdc <HAL_GPIO_Init+0x2a4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_GPIO_Init+0x19a>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a49      	ldr	r2, [pc, #292]	; (8000fe0 <HAL_GPIO_Init+0x2a8>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x196>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a48      	ldr	r2, [pc, #288]	; (8000fe4 <HAL_GPIO_Init+0x2ac>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_GPIO_Init+0x192>
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x1a0>
 8000eca:	2304      	movs	r3, #4
 8000ecc:	e004      	b.n	8000ed8 <HAL_GPIO_Init+0x1a0>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_Init+0x1a0>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <HAL_GPIO_Init+0x1a0>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eda:	f002 0203 	and.w	r2, r2, #3
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	4093      	lsls	r3, r2
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ee8:	493a      	ldr	r1, [pc, #232]	; (8000fd4 <HAL_GPIO_Init+0x29c>)
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f02:	4b39      	ldr	r3, [pc, #228]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4938      	ldr	r1, [pc, #224]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	600b      	str	r3, [r1, #0]
 8000f0e:	e006      	b.n	8000f1e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f10:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	4933      	ldr	r1, [pc, #204]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d006      	beq.n	8000f38 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	492e      	ldr	r1, [pc, #184]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	604b      	str	r3, [r1, #4]
 8000f36:	e006      	b.n	8000f46 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f38:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	4929      	ldr	r1, [pc, #164]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f42:	4013      	ands	r3, r2
 8000f44:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d006      	beq.n	8000f60 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f52:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	4924      	ldr	r1, [pc, #144]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	608b      	str	r3, [r1, #8]
 8000f5e:	e006      	b.n	8000f6e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f60:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	491f      	ldr	r1, [pc, #124]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d006      	beq.n	8000f88 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	491a      	ldr	r1, [pc, #104]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60cb      	str	r3, [r1, #12]
 8000f86:	e006      	b.n	8000f96 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	4915      	ldr	r1, [pc, #84]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f92:	4013      	ands	r3, r2
 8000f94:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	3301      	adds	r3, #1
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f47f aed0 	bne.w	8000d4c <HAL_GPIO_Init+0x14>
  }
}
 8000fac:	bf00      	nop
 8000fae:	372c      	adds	r7, #44	; 0x2c
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	10210000 	.word	0x10210000
 8000fbc:	10110000 	.word	0x10110000
 8000fc0:	10120000 	.word	0x10120000
 8000fc4:	10310000 	.word	0x10310000
 8000fc8:	10320000 	.word	0x10320000
 8000fcc:	10220000 	.word	0x10220000
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010000 	.word	0x40010000
 8000fd8:	40010800 	.word	0x40010800
 8000fdc:	40010c00 	.word	0x40010c00
 8000fe0:	40011000 	.word	0x40011000
 8000fe4:	40011400 	.word	0x40011400
 8000fe8:	40010400 	.word	0x40010400

08000fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	e001      	b.n	800100e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
	...

0800101c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e26c      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8087 	beq.w	800114a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800103c:	4b92      	ldr	r3, [pc, #584]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b04      	cmp	r3, #4
 8001046:	d00c      	beq.n	8001062 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001048:	4b8f      	ldr	r3, [pc, #572]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b08      	cmp	r3, #8
 8001052:	d112      	bne.n	800107a <HAL_RCC_OscConfig+0x5e>
 8001054:	4b8c      	ldr	r3, [pc, #560]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001060:	d10b      	bne.n	800107a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001062:	4b89      	ldr	r3, [pc, #548]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d06c      	beq.n	8001148 <HAL_RCC_OscConfig+0x12c>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d168      	bne.n	8001148 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e246      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001082:	d106      	bne.n	8001092 <HAL_RCC_OscConfig+0x76>
 8001084:	4b80      	ldr	r3, [pc, #512]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a7f      	ldr	r2, [pc, #508]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 800108a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	e02e      	b.n	80010f0 <HAL_RCC_OscConfig+0xd4>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10c      	bne.n	80010b4 <HAL_RCC_OscConfig+0x98>
 800109a:	4b7b      	ldr	r3, [pc, #492]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a7a      	ldr	r2, [pc, #488]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	4b78      	ldr	r3, [pc, #480]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a77      	ldr	r2, [pc, #476]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e01d      	b.n	80010f0 <HAL_RCC_OscConfig+0xd4>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010bc:	d10c      	bne.n	80010d8 <HAL_RCC_OscConfig+0xbc>
 80010be:	4b72      	ldr	r3, [pc, #456]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a71      	ldr	r2, [pc, #452]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	4b6f      	ldr	r3, [pc, #444]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a6e      	ldr	r2, [pc, #440]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e00b      	b.n	80010f0 <HAL_RCC_OscConfig+0xd4>
 80010d8:	4b6b      	ldr	r3, [pc, #428]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a6a      	ldr	r2, [pc, #424]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b68      	ldr	r3, [pc, #416]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a67      	ldr	r2, [pc, #412]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d013      	beq.n	8001120 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fc6e 	bl	80009d8 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fc6a 	bl	80009d8 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e1fa      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001112:	4b5d      	ldr	r3, [pc, #372]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0xe4>
 800111e:	e014      	b.n	800114a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fc5a 	bl	80009d8 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fc56 	bl	80009d8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	; 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e1e6      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113a:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x10c>
 8001146:	e000      	b.n	800114a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d063      	beq.n	800121e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001156:	4b4c      	ldr	r3, [pc, #304]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00b      	beq.n	800117a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001162:	4b49      	ldr	r3, [pc, #292]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	2b08      	cmp	r3, #8
 800116c:	d11c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x18c>
 800116e:	4b46      	ldr	r3, [pc, #280]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d116      	bne.n	80011a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117a:	4b43      	ldr	r3, [pc, #268]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d005      	beq.n	8001192 <HAL_RCC_OscConfig+0x176>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d001      	beq.n	8001192 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e1ba      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	4939      	ldr	r1, [pc, #228]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a6:	e03a      	b.n	800121e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d020      	beq.n	80011f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b0:	4b36      	ldr	r3, [pc, #216]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b6:	f7ff fc0f 	bl	80009d8 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011be:	f7ff fc0b 	bl	80009d8 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e19b      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d0:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0f0      	beq.n	80011be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011dc:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	4927      	ldr	r1, [pc, #156]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]
 80011f0:	e015      	b.n	800121e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fbee 	bl	80009d8 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001200:	f7ff fbea 	bl	80009d8 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e17a      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d03a      	beq.n	80012a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d019      	beq.n	8001266 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_RCC_OscConfig+0x274>)
 8001234:	2201      	movs	r2, #1
 8001236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001238:	f7ff fbce 	bl	80009d8 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001240:	f7ff fbca 	bl	80009d8 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e15a      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800125e:	2001      	movs	r0, #1
 8001260:	f000 fada 	bl	8001818 <RCC_Delay>
 8001264:	e01c      	b.n	80012a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_RCC_OscConfig+0x274>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126c:	f7ff fbb4 	bl	80009d8 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001272:	e00f      	b.n	8001294 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001274:	f7ff fbb0 	bl	80009d8 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d908      	bls.n	8001294 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e140      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	42420000 	.word	0x42420000
 8001290:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001294:	4b9e      	ldr	r3, [pc, #632]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1e9      	bne.n	8001274 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80a6 	beq.w	80013fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b2:	4b97      	ldr	r3, [pc, #604]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10d      	bne.n	80012da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b94      	ldr	r3, [pc, #592]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a93      	ldr	r2, [pc, #588]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	4b91      	ldr	r3, [pc, #580]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d6:	2301      	movs	r3, #1
 80012d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012da:	4b8e      	ldr	r3, [pc, #568]	; (8001514 <HAL_RCC_OscConfig+0x4f8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d118      	bne.n	8001318 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012e6:	4b8b      	ldr	r3, [pc, #556]	; (8001514 <HAL_RCC_OscConfig+0x4f8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a8a      	ldr	r2, [pc, #552]	; (8001514 <HAL_RCC_OscConfig+0x4f8>)
 80012ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fb71 	bl	80009d8 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fa:	f7ff fb6d 	bl	80009d8 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b64      	cmp	r3, #100	; 0x64
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e0fd      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130c:	4b81      	ldr	r3, [pc, #516]	; (8001514 <HAL_RCC_OscConfig+0x4f8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d106      	bne.n	800132e <HAL_RCC_OscConfig+0x312>
 8001320:	4b7b      	ldr	r3, [pc, #492]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4a7a      	ldr	r2, [pc, #488]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6213      	str	r3, [r2, #32]
 800132c:	e02d      	b.n	800138a <HAL_RCC_OscConfig+0x36e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x334>
 8001336:	4b76      	ldr	r3, [pc, #472]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4a75      	ldr	r2, [pc, #468]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	6213      	str	r3, [r2, #32]
 8001342:	4b73      	ldr	r3, [pc, #460]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4a72      	ldr	r2, [pc, #456]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	f023 0304 	bic.w	r3, r3, #4
 800134c:	6213      	str	r3, [r2, #32]
 800134e:	e01c      	b.n	800138a <HAL_RCC_OscConfig+0x36e>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b05      	cmp	r3, #5
 8001356:	d10c      	bne.n	8001372 <HAL_RCC_OscConfig+0x356>
 8001358:	4b6d      	ldr	r3, [pc, #436]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4a6c      	ldr	r2, [pc, #432]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	6213      	str	r3, [r2, #32]
 8001364:	4b6a      	ldr	r3, [pc, #424]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4a69      	ldr	r2, [pc, #420]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6213      	str	r3, [r2, #32]
 8001370:	e00b      	b.n	800138a <HAL_RCC_OscConfig+0x36e>
 8001372:	4b67      	ldr	r3, [pc, #412]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a66      	ldr	r2, [pc, #408]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	6213      	str	r3, [r2, #32]
 800137e:	4b64      	ldr	r3, [pc, #400]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a63      	ldr	r2, [pc, #396]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001384:	f023 0304 	bic.w	r3, r3, #4
 8001388:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d015      	beq.n	80013be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001392:	f7ff fb21 	bl	80009d8 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001398:	e00a      	b.n	80013b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff fb1d 	bl	80009d8 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e0ab      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b0:	4b57      	ldr	r3, [pc, #348]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0ee      	beq.n	800139a <HAL_RCC_OscConfig+0x37e>
 80013bc:	e014      	b.n	80013e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff fb0b 	bl	80009d8 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c4:	e00a      	b.n	80013dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c6:	f7ff fb07 	bl	80009d8 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e095      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013dc:	4b4c      	ldr	r3, [pc, #304]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1ee      	bne.n	80013c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d105      	bne.n	80013fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ee:	4b48      	ldr	r3, [pc, #288]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a47      	ldr	r2, [pc, #284]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 8081 	beq.w	8001506 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001404:	4b42      	ldr	r3, [pc, #264]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 030c 	and.w	r3, r3, #12
 800140c:	2b08      	cmp	r3, #8
 800140e:	d061      	beq.n	80014d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d146      	bne.n	80014a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001418:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <HAL_RCC_OscConfig+0x4fc>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fadb 	bl	80009d8 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001426:	f7ff fad7 	bl	80009d8 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e067      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001438:	4b35      	ldr	r3, [pc, #212]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f0      	bne.n	8001426 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144c:	d108      	bne.n	8001460 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	492d      	ldr	r1, [pc, #180]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a19      	ldr	r1, [r3, #32]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	430b      	orrs	r3, r1
 8001472:	4927      	ldr	r1, [pc, #156]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_RCC_OscConfig+0x4fc>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff faab 	bl	80009d8 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff faa7 	bl	80009d8 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e037      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x46a>
 80014a4:	e02f      	b.n	8001506 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <HAL_RCC_OscConfig+0x4fc>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fa94 	bl	80009d8 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff fa90 	bl	80009d8 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e020      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x498>
 80014d2:	e018      	b.n	8001506 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e013      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	40007000 	.word	0x40007000
 8001518:	42420060 	.word	0x42420060

0800151c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0d0      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001530:	4b6a      	ldr	r3, [pc, #424]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d910      	bls.n	8001560 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b67      	ldr	r3, [pc, #412]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 0207 	bic.w	r2, r3, #7
 8001546:	4965      	ldr	r1, [pc, #404]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800154e:	4b63      	ldr	r3, [pc, #396]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d001      	beq.n	8001560 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0b8      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d020      	beq.n	80015ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001578:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a58      	ldr	r2, [pc, #352]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001582:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001590:	4b53      	ldr	r3, [pc, #332]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4a52      	ldr	r2, [pc, #328]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800159a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800159c:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	494d      	ldr	r1, [pc, #308]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d040      	beq.n	800163c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d115      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e07f      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015da:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d109      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e073      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ea:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e06b      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fa:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f023 0203 	bic.w	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4936      	ldr	r1, [pc, #216]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800160c:	f7ff f9e4 	bl	80009d8 <HAL_GetTick>
 8001610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	e00a      	b.n	800162a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001614:	f7ff f9e0 	bl	80009d8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e053      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 020c 	and.w	r2, r3, #12
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	429a      	cmp	r2, r3
 800163a:	d1eb      	bne.n	8001614 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d210      	bcs.n	800166c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 0207 	bic.w	r2, r3, #7
 8001652:	4922      	ldr	r1, [pc, #136]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e032      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4916      	ldr	r1, [pc, #88]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	4313      	orrs	r3, r2
 8001688:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d009      	beq.n	80016aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	490e      	ldr	r1, [pc, #56]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016aa:	f000 f821 	bl	80016f0 <HAL_RCC_GetSysClockFreq>
 80016ae:	4601      	mov	r1, r0
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016bc:	5cd3      	ldrb	r3, [r2, r3]
 80016be:	fa21 f303 	lsr.w	r3, r1, r3
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <HAL_RCC_ClockConfig+0x1cc>)
 80016c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_RCC_ClockConfig+0x1d0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f942 	bl	8000954 <HAL_InitTick>

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40022000 	.word	0x40022000
 80016e0:	40021000 	.word	0x40021000
 80016e4:	080036a8 	.word	0x080036a8
 80016e8:	20000008 	.word	0x20000008
 80016ec:	20000000 	.word	0x20000000

080016f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f0:	b490      	push	{r4, r7}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016f8:	1d3c      	adds	r4, r7, #4
 80016fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b04      	cmp	r3, #4
 8001728:	d002      	beq.n	8001730 <HAL_RCC_GetSysClockFreq+0x40>
 800172a:	2b08      	cmp	r3, #8
 800172c:	d003      	beq.n	8001736 <HAL_RCC_GetSysClockFreq+0x46>
 800172e:	e02d      	b.n	800178c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001732:	623b      	str	r3, [r7, #32]
      break;
 8001734:	e02d      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	0c9b      	lsrs	r3, r3, #18
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001742:	4413      	add	r3, r2
 8001744:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001748:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d013      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	0c5b      	lsrs	r3, r3, #17
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001762:	4413      	add	r3, r2
 8001764:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001768:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800176e:	fb02 f203 	mul.w	r2, r2, r3
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	fbb2 f3f3 	udiv	r3, r2, r3
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
 800177a:	e004      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001780:	fb02 f303 	mul.w	r3, r2, r3
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	623b      	str	r3, [r7, #32]
      break;
 800178a:	e002      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800178e:	623b      	str	r3, [r7, #32]
      break;
 8001790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001792:	6a3b      	ldr	r3, [r7, #32]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bc90      	pop	{r4, r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	08003674 	.word	0x08003674
 80017a4:	08003684 	.word	0x08003684
 80017a8:	40021000 	.word	0x40021000
 80017ac:	007a1200 	.word	0x007a1200
 80017b0:	003d0900 	.word	0x003d0900

080017b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b8:	4b02      	ldr	r3, [pc, #8]	; (80017c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	20000008 	.word	0x20000008

080017c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017cc:	f7ff fff2 	bl	80017b4 <HAL_RCC_GetHCLKFreq>
 80017d0:	4601      	mov	r1, r0
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	4a03      	ldr	r2, [pc, #12]	; (80017ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80017de:	5cd3      	ldrb	r3, [r2, r3]
 80017e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	080036b8 	.word	0x080036b8

080017f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017f4:	f7ff ffde 	bl	80017b4 <HAL_RCC_GetHCLKFreq>
 80017f8:	4601      	mov	r1, r0
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	0adb      	lsrs	r3, r3, #11
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	4a03      	ldr	r2, [pc, #12]	; (8001814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001806:	5cd3      	ldrb	r3, [r2, r3]
 8001808:	fa21 f303 	lsr.w	r3, r1, r3
}
 800180c:	4618      	mov	r0, r3
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000
 8001814:	080036b8 	.word	0x080036b8

08001818 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <RCC_Delay+0x34>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <RCC_Delay+0x38>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0a5b      	lsrs	r3, r3, #9
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001834:	bf00      	nop
  }
  while (Delay --);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1e5a      	subs	r2, r3, #1
 800183a:	60fa      	str	r2, [r7, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f9      	bne.n	8001834 <RCC_Delay+0x1c>
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000008 	.word	0x20000008
 8001850:	10624dd3 	.word	0x10624dd3

08001854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e041      	b.n	80018ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d106      	bne.n	8001880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f001 fdc2 	bl	8003404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3304      	adds	r3, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f000 fa9e 	bl	8001dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e041      	b.n	8001988 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d106      	bne.n	800191e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f839 	bl	8001990 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2202      	movs	r2, #2
 8001922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3304      	adds	r3, #4
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f000 fa4f 	bl	8001dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <HAL_TIM_PWM_Start+0x24>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b01      	cmp	r3, #1
 80019be:	bf14      	ite	ne
 80019c0:	2301      	movne	r3, #1
 80019c2:	2300      	moveq	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	e022      	b.n	8001a0e <HAL_TIM_PWM_Start+0x6a>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d109      	bne.n	80019e2 <HAL_TIM_PWM_Start+0x3e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	bf14      	ite	ne
 80019da:	2301      	movne	r3, #1
 80019dc:	2300      	moveq	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	e015      	b.n	8001a0e <HAL_TIM_PWM_Start+0x6a>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d109      	bne.n	80019fc <HAL_TIM_PWM_Start+0x58>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	e008      	b.n	8001a0e <HAL_TIM_PWM_Start+0x6a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	bf14      	ite	ne
 8001a08:	2301      	movne	r3, #1
 8001a0a:	2300      	moveq	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e05e      	b.n	8001ad4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d104      	bne.n	8001a26 <HAL_TIM_PWM_Start+0x82>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a24:	e013      	b.n	8001a4e <HAL_TIM_PWM_Start+0xaa>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d104      	bne.n	8001a36 <HAL_TIM_PWM_Start+0x92>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a34:	e00b      	b.n	8001a4e <HAL_TIM_PWM_Start+0xaa>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d104      	bne.n	8001a46 <HAL_TIM_PWM_Start+0xa2>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a44:	e003      	b.n	8001a4e <HAL_TIM_PWM_Start+0xaa>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2201      	movs	r2, #1
 8001a54:	6839      	ldr	r1, [r7, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 fc3c 	bl	80022d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <HAL_TIM_PWM_Start+0x138>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d107      	bne.n	8001a76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a18      	ldr	r2, [pc, #96]	; (8001adc <HAL_TIM_PWM_Start+0x138>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d00e      	beq.n	8001a9e <HAL_TIM_PWM_Start+0xfa>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a88:	d009      	beq.n	8001a9e <HAL_TIM_PWM_Start+0xfa>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <HAL_TIM_PWM_Start+0x13c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d004      	beq.n	8001a9e <HAL_TIM_PWM_Start+0xfa>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <HAL_TIM_PWM_Start+0x140>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d111      	bne.n	8001ac2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b06      	cmp	r3, #6
 8001aae:	d010      	beq.n	8001ad2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ac0:	e007      	b.n	8001ad2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0201 	orr.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40012c00 	.word	0x40012c00
 8001ae0:	40000400 	.word	0x40000400
 8001ae4:	40000800 	.word	0x40000800

08001ae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e0ac      	b.n	8001c5c <HAL_TIM_PWM_ConfigChannel+0x174>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0c      	cmp	r3, #12
 8001b0e:	f200 809f 	bhi.w	8001c50 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001b12:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b18:	08001b4d 	.word	0x08001b4d
 8001b1c:	08001c51 	.word	0x08001c51
 8001b20:	08001c51 	.word	0x08001c51
 8001b24:	08001c51 	.word	0x08001c51
 8001b28:	08001b8d 	.word	0x08001b8d
 8001b2c:	08001c51 	.word	0x08001c51
 8001b30:	08001c51 	.word	0x08001c51
 8001b34:	08001c51 	.word	0x08001c51
 8001b38:	08001bcf 	.word	0x08001bcf
 8001b3c:	08001c51 	.word	0x08001c51
 8001b40:	08001c51 	.word	0x08001c51
 8001b44:	08001c51 	.word	0x08001c51
 8001b48:	08001c0f 	.word	0x08001c0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f9a0 	bl	8001e98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0208 	orr.w	r2, r2, #8
 8001b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0204 	bic.w	r2, r2, #4
 8001b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6999      	ldr	r1, [r3, #24]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	619a      	str	r2, [r3, #24]
      break;
 8001b8a:	e062      	b.n	8001c52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f9e6 	bl	8001f64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699a      	ldr	r2, [r3, #24]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6999      	ldr	r1, [r3, #24]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	021a      	lsls	r2, r3, #8
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	619a      	str	r2, [r3, #24]
      break;
 8001bcc:	e041      	b.n	8001c52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fa2f 	bl	8002038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69da      	ldr	r2, [r3, #28]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0208 	orr.w	r2, r2, #8
 8001be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	69da      	ldr	r2, [r3, #28]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0204 	bic.w	r2, r2, #4
 8001bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	69d9      	ldr	r1, [r3, #28]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	61da      	str	r2, [r3, #28]
      break;
 8001c0c:	e021      	b.n	8001c52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fa79 	bl	800210c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69da      	ldr	r2, [r3, #28]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	69da      	ldr	r2, [r3, #28]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69d9      	ldr	r1, [r3, #28]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	021a      	lsls	r2, r3, #8
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	61da      	str	r2, [r3, #28]
      break;
 8001c4e:	e000      	b.n	8001c52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001c50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_TIM_ConfigClockSource+0x18>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e0a6      	b.n	8001dca <HAL_TIM_ConfigClockSource+0x166>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ca2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b40      	cmp	r3, #64	; 0x40
 8001cb2:	d067      	beq.n	8001d84 <HAL_TIM_ConfigClockSource+0x120>
 8001cb4:	2b40      	cmp	r3, #64	; 0x40
 8001cb6:	d80b      	bhi.n	8001cd0 <HAL_TIM_ConfigClockSource+0x6c>
 8001cb8:	2b10      	cmp	r3, #16
 8001cba:	d073      	beq.n	8001da4 <HAL_TIM_ConfigClockSource+0x140>
 8001cbc:	2b10      	cmp	r3, #16
 8001cbe:	d802      	bhi.n	8001cc6 <HAL_TIM_ConfigClockSource+0x62>
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d06f      	beq.n	8001da4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001cc4:	e078      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d06c      	beq.n	8001da4 <HAL_TIM_ConfigClockSource+0x140>
 8001cca:	2b30      	cmp	r3, #48	; 0x30
 8001ccc:	d06a      	beq.n	8001da4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001cce:	e073      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001cd0:	2b70      	cmp	r3, #112	; 0x70
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_TIM_ConfigClockSource+0x8c>
 8001cd4:	2b70      	cmp	r3, #112	; 0x70
 8001cd6:	d804      	bhi.n	8001ce2 <HAL_TIM_ConfigClockSource+0x7e>
 8001cd8:	2b50      	cmp	r3, #80	; 0x50
 8001cda:	d033      	beq.n	8001d44 <HAL_TIM_ConfigClockSource+0xe0>
 8001cdc:	2b60      	cmp	r3, #96	; 0x60
 8001cde:	d041      	beq.n	8001d64 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001ce0:	e06a      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ce6:	d066      	beq.n	8001db6 <HAL_TIM_ConfigClockSource+0x152>
 8001ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cec:	d017      	beq.n	8001d1e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001cee:	e063      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6899      	ldr	r1, [r3, #8]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f000 fac9 	bl	8002296 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d12:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	609a      	str	r2, [r3, #8]
      break;
 8001d1c:	e04c      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6899      	ldr	r1, [r3, #8]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f000 fab2 	bl	8002296 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d40:	609a      	str	r2, [r3, #8]
      break;
 8001d42:	e039      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	461a      	mov	r2, r3
 8001d52:	f000 fa29 	bl	80021a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2150      	movs	r1, #80	; 0x50
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 fa80 	bl	8002262 <TIM_ITRx_SetConfig>
      break;
 8001d62:	e029      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	461a      	mov	r2, r3
 8001d72:	f000 fa47 	bl	8002204 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2160      	movs	r1, #96	; 0x60
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fa70 	bl	8002262 <TIM_ITRx_SetConfig>
      break;
 8001d82:	e019      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	461a      	mov	r2, r3
 8001d92:	f000 fa09 	bl	80021a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2140      	movs	r1, #64	; 0x40
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 fa60 	bl	8002262 <TIM_ITRx_SetConfig>
      break;
 8001da2:	e009      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 fa57 	bl	8002262 <TIM_ITRx_SetConfig>
        break;
 8001db4:	e000      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a29      	ldr	r2, [pc, #164]	; (8001e8c <TIM_Base_SetConfig+0xb8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d00b      	beq.n	8001e04 <TIM_Base_SetConfig+0x30>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df2:	d007      	beq.n	8001e04 <TIM_Base_SetConfig+0x30>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <TIM_Base_SetConfig+0xbc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d003      	beq.n	8001e04 <TIM_Base_SetConfig+0x30>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a25      	ldr	r2, [pc, #148]	; (8001e94 <TIM_Base_SetConfig+0xc0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d108      	bne.n	8001e16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <TIM_Base_SetConfig+0xb8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00b      	beq.n	8001e36 <TIM_Base_SetConfig+0x62>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e24:	d007      	beq.n	8001e36 <TIM_Base_SetConfig+0x62>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <TIM_Base_SetConfig+0xbc>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d003      	beq.n	8001e36 <TIM_Base_SetConfig+0x62>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <TIM_Base_SetConfig+0xc0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d108      	bne.n	8001e48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <TIM_Base_SetConfig+0xb8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d103      	bne.n	8001e7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	615a      	str	r2, [r3, #20]
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	40012c00 	.word	0x40012c00
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000800 	.word	0x40000800

08001e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	f023 0201 	bic.w	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f023 0303 	bic.w	r3, r3, #3
 8001ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f023 0302 	bic.w	r3, r3, #2
 8001ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <TIM_OC1_SetConfig+0xc8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d10c      	bne.n	8001f0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f023 0308 	bic.w	r3, r3, #8
 8001efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a13      	ldr	r2, [pc, #76]	; (8001f60 <TIM_OC1_SetConfig+0xc8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d111      	bne.n	8001f3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	621a      	str	r2, [r3, #32]
}
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40012c00 	.word	0x40012c00

08001f64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	f023 0210 	bic.w	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f023 0320 	bic.w	r3, r3, #32
 8001fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <TIM_OC2_SetConfig+0xd0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d10d      	bne.n	8001fe0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a14      	ldr	r2, [pc, #80]	; (8002034 <TIM_OC2_SetConfig+0xd0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d113      	bne.n	8002010 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	621a      	str	r2, [r3, #32]
}
 800202a:	bf00      	nop
 800202c:	371c      	adds	r7, #28
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	40012c00 	.word	0x40012c00

08002038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 0303 	bic.w	r3, r3, #3
 800206e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4313      	orrs	r3, r2
 800208c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <TIM_OC3_SetConfig+0xd0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10d      	bne.n	80020b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800209c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <TIM_OC3_SetConfig+0xd0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d113      	bne.n	80020e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	621a      	str	r2, [r3, #32]
}
 80020fc:	bf00      	nop
 80020fe:	371c      	adds	r7, #28
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40012c00 	.word	0x40012c00

0800210c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800213a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	031b      	lsls	r3, r3, #12
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <TIM_OC4_SetConfig+0x98>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d109      	bne.n	8002180 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	621a      	str	r2, [r3, #32]
}
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	40012c00 	.word	0x40012c00

080021a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	f023 0201 	bic.w	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f023 030a 	bic.w	r3, r3, #10
 80021e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	621a      	str	r2, [r3, #32]
}
 80021fa:	bf00      	nop
 80021fc:	371c      	adds	r7, #28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f023 0210 	bic.w	r2, r3, #16
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800222e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	031b      	lsls	r3, r3, #12
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002240:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	621a      	str	r2, [r3, #32]
}
 8002258:	bf00      	nop
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr

08002262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	f043 0307 	orr.w	r3, r3, #7
 8002284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	609a      	str	r2, [r3, #8]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002296:	b480      	push	{r7}
 8002298:	b087      	sub	sp, #28
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	021a      	lsls	r2, r3, #8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4313      	orrs	r3, r2
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	609a      	str	r2, [r3, #8]
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	2201      	movs	r2, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a1a      	ldr	r2, [r3, #32]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	401a      	ands	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	431a      	orrs	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	621a      	str	r2, [r3, #32]
}
 8002312:	bf00      	nop
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002330:	2302      	movs	r3, #2
 8002332:	e046      	b.n	80023c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a16      	ldr	r2, [pc, #88]	; (80023cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00e      	beq.n	8002396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002380:	d009      	beq.n	8002396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d004      	beq.n	8002396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d10c      	bne.n	80023b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800239c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	40012c00 	.word	0x40012c00
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800

080023d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e03f      	b.n	800246a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f001 f81c 	bl	800343c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2224      	movs	r2, #36	; 0x24
 8002408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800241a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fb83 	bl	8002b28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b08a      	sub	sp, #40	; 0x28
 8002476:	af02      	add	r7, sp, #8
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	4613      	mov	r3, r2
 8002480:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b20      	cmp	r3, #32
 8002490:	d17c      	bne.n	800258c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_UART_Transmit+0x2c>
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e075      	b.n	800258e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_UART_Transmit+0x3e>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e06e      	b.n	800258e <HAL_UART_Transmit+0x11c>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2221      	movs	r2, #33	; 0x21
 80024c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024c6:	f7fe fa87 	bl	80009d8 <HAL_GetTick>
 80024ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	88fa      	ldrh	r2, [r7, #6]
 80024d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	88fa      	ldrh	r2, [r7, #6]
 80024d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e0:	d108      	bne.n	80024f4 <HAL_UART_Transmit+0x82>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d104      	bne.n	80024f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	e003      	b.n	80024fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002504:	e02a      	b.n	800255c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2200      	movs	r2, #0
 800250e:	2180      	movs	r1, #128	; 0x80
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f9a7 	bl	8002864 <UART_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e036      	b.n	800258e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10b      	bne.n	800253e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002534:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	3302      	adds	r3, #2
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	e007      	b.n	800254e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	3301      	adds	r3, #1
 800254c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1cf      	bne.n	8002506 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2200      	movs	r2, #0
 800256e:	2140      	movs	r1, #64	; 0x40
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f977 	bl	8002864 <UART_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e006      	b.n	800258e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	e000      	b.n	800258e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800258c:	2302      	movs	r3, #2
  }
}
 800258e:	4618      	mov	r0, r3
 8002590:	3720      	adds	r7, #32
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002596:	b480      	push	{r7}
 8002598:	b085      	sub	sp, #20
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	4613      	mov	r3, r2
 80025a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d140      	bne.n	8002632 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_UART_Receive_IT+0x26>
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e039      	b.n	8002634 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_UART_Receive_IT+0x38>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e032      	b.n	8002634 <HAL_UART_Receive_IT+0x9e>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	88fa      	ldrh	r2, [r7, #6]
 80025e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	88fa      	ldrh	r2, [r7, #6]
 80025e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2222      	movs	r2, #34	; 0x22
 80025f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800260c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0220 	orr.w	r2, r2, #32
 800262c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	e000      	b.n	8002634 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002632:	2302      	movs	r3, #2
  }
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
	...

08002640 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10d      	bne.n	8002692 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_UART_IRQHandler+0x52>
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f9cc 	bl	8002a28 <UART_Receive_IT>
      return;
 8002690:	e0d1      	b.n	8002836 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80b0 	beq.w	80027fa <HAL_UART_IRQHandler+0x1ba>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_UART_IRQHandler+0x70>
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80a5 	beq.w	80027fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_UART_IRQHandler+0x90>
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c8:	f043 0201 	orr.w	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_UART_IRQHandler+0xb0>
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e8:	f043 0202 	orr.w	r2, r3, #2
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_UART_IRQHandler+0xd0>
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002708:	f043 0204 	orr.w	r2, r3, #4
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00f      	beq.n	800273a <HAL_UART_IRQHandler+0xfa>
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b00      	cmp	r3, #0
 8002722:	d104      	bne.n	800272e <HAL_UART_IRQHandler+0xee>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002732:	f043 0208 	orr.w	r2, r3, #8
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273e:	2b00      	cmp	r3, #0
 8002740:	d078      	beq.n	8002834 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <HAL_UART_IRQHandler+0x11c>
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f966 	bl	8002a28 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	bf14      	ite	ne
 800276a:	2301      	movne	r3, #1
 800276c:	2300      	moveq	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_UART_IRQHandler+0x144>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d031      	beq.n	80027e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f8b7 	bl	80028f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d023      	beq.n	80027e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d013      	beq.n	80027d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b4:	4a21      	ldr	r2, [pc, #132]	; (800283c <HAL_UART_IRQHandler+0x1fc>)
 80027b6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fa45 	bl	8000c4c <HAL_DMA_Abort_IT>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d016      	beq.n	80027f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027d2:	4610      	mov	r0, r2
 80027d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d6:	e00e      	b.n	80027f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f83a 	bl	8002852 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027de:	e00a      	b.n	80027f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f836 	bl	8002852 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e6:	e006      	b.n	80027f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f832 	bl	8002852 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80027f4:	e01e      	b.n	8002834 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f6:	bf00      	nop
    return;
 80027f8:	e01c      	b.n	8002834 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_UART_IRQHandler+0x1d6>
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f8a3 	bl	800295a <UART_Transmit_IT>
    return;
 8002814:	e00f      	b.n	8002836 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_UART_IRQHandler+0x1f6>
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f8e4 	bl	80029f8 <UART_EndTransmit_IT>
    return;
 8002830:	bf00      	nop
 8002832:	e000      	b.n	8002836 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002834:	bf00      	nop
  }
}
 8002836:	3720      	adds	r7, #32
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	08002933 	.word	0x08002933

08002840 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002874:	e02c      	b.n	80028d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d028      	beq.n	80028d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d007      	beq.n	8002894 <UART_WaitOnFlagUntilTimeout+0x30>
 8002884:	f7fe f8a8 	bl	80009d8 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	429a      	cmp	r2, r3
 8002892:	d21d      	bcs.n	80028d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e00f      	b.n	80028f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4013      	ands	r3, r2
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	429a      	cmp	r2, r3
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d0c3      	beq.n	8002876 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800290e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f7ff ff80 	bl	8002852 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800295a:	b480      	push	{r7}
 800295c:	b085      	sub	sp, #20
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b21      	cmp	r3, #33	; 0x21
 800296c:	d13e      	bne.n	80029ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002976:	d114      	bne.n	80029a2 <UART_Transmit_IT+0x48>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d110      	bne.n	80029a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002994:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	1c9a      	adds	r2, r3, #2
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	621a      	str	r2, [r3, #32]
 80029a0:	e008      	b.n	80029b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	1c59      	adds	r1, r3, #1
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6211      	str	r1, [r2, #32]
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29b      	uxth	r3, r3
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4619      	mov	r1, r3
 80029c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10f      	bne.n	80029e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e000      	b.n	80029ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
  }
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff11 	bl	8002840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b22      	cmp	r3, #34	; 0x22
 8002a3a:	d170      	bne.n	8002b1e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a44:	d117      	bne.n	8002a76 <UART_Receive_IT+0x4e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d113      	bne.n	8002a76 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	1c9a      	adds	r2, r3, #2
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28
 8002a74:	e026      	b.n	8002ac4 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a88:	d007      	beq.n	8002a9a <UART_Receive_IT+0x72>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10a      	bne.n	8002aa8 <UART_Receive_IT+0x80>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e008      	b.n	8002aba <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d120      	bne.n	8002b1a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0220 	bic.w	r2, r2, #32
 8002ae6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fb73 	bl	80031fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e002      	b.n	8002b20 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e000      	b.n	8002b20 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002b1e:	2302      	movs	r3, #2
  }
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b62:	f023 030c 	bic.w	r3, r3, #12
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a2c      	ldr	r2, [pc, #176]	; (8002c3c <UART_SetConfig+0x114>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d103      	bne.n	8002b98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b90:	f7fe fe2e 	bl	80017f0 <HAL_RCC_GetPCLK2Freq>
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	e002      	b.n	8002b9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b98:	f7fe fe16 	bl	80017c8 <HAL_RCC_GetPCLK1Freq>
 8002b9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009a      	lsls	r2, r3, #2
 8002ba8:	441a      	add	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <UART_SetConfig+0x118>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	0119      	lsls	r1, r3, #4
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009a      	lsls	r2, r3, #2
 8002bc8:	441a      	add	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <UART_SetConfig+0x118>)
 8002bd6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	2064      	movs	r0, #100	; 0x64
 8002bde:	fb00 f303 	mul.w	r3, r0, r3
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	3332      	adds	r3, #50	; 0x32
 8002be8:	4a15      	ldr	r2, [pc, #84]	; (8002c40 <UART_SetConfig+0x118>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf4:	4419      	add	r1, r3
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009a      	lsls	r2, r3, #2
 8002c00:	441a      	add	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <UART_SetConfig+0x118>)
 8002c0e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	2064      	movs	r0, #100	; 0x64
 8002c16:	fb00 f303 	mul.w	r3, r0, r3
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	3332      	adds	r3, #50	; 0x32
 8002c20:	4a07      	ldr	r2, [pc, #28]	; (8002c40 <UART_SetConfig+0x118>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	f003 020f 	and.w	r2, r3, #15
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	440a      	add	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40013800 	.word	0x40013800
 8002c40:	51eb851f 	.word	0x51eb851f

08002c44 <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8002c44:	b5b0      	push	{r4, r5, r7, lr}
 8002c46:	b0b0      	sub	sp, #192	; 0xc0
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002c74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
 8002c84:	615a      	str	r2, [r3, #20]
 8002c86:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    uint32_t ARR_Value = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    DWT_Delay_Init();
 8002c94:	f000 fc86 	bl	80035a4 <DWT_Delay_Init>

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOA)
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	4a87      	ldr	r2, [pc, #540]	; (8002eb8 <SERVO_Init+0x274>)
 8002c9c:	015b      	lsls	r3, r3, #5
 8002c9e:	4413      	add	r3, r2
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a86      	ldr	r2, [pc, #536]	; (8002ebc <SERVO_Init+0x278>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d10c      	bne.n	8002cc2 <SERVO_Init+0x7e>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca8:	4b85      	ldr	r3, [pc, #532]	; (8002ec0 <SERVO_Init+0x27c>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	4a84      	ldr	r2, [pc, #528]	; (8002ec0 <SERVO_Init+0x27c>)
 8002cae:	f043 0304 	orr.w	r3, r3, #4
 8002cb2:	6193      	str	r3, [r2, #24]
 8002cb4:	4b82      	ldr	r3, [pc, #520]	; (8002ec0 <SERVO_Init+0x27c>)
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	e052      	b.n	8002d68 <SERVO_Init+0x124>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOB)
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	4a7c      	ldr	r2, [pc, #496]	; (8002eb8 <SERVO_Init+0x274>)
 8002cc6:	015b      	lsls	r3, r3, #5
 8002cc8:	4413      	add	r3, r2
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a7d      	ldr	r2, [pc, #500]	; (8002ec4 <SERVO_Init+0x280>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d10c      	bne.n	8002cec <SERVO_Init+0xa8>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd2:	4b7b      	ldr	r3, [pc, #492]	; (8002ec0 <SERVO_Init+0x27c>)
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	4a7a      	ldr	r2, [pc, #488]	; (8002ec0 <SERVO_Init+0x27c>)
 8002cd8:	f043 0308 	orr.w	r3, r3, #8
 8002cdc:	6193      	str	r3, [r2, #24]
 8002cde:	4b78      	ldr	r3, [pc, #480]	; (8002ec0 <SERVO_Init+0x27c>)
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	e03d      	b.n	8002d68 <SERVO_Init+0x124>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOC)
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	4a72      	ldr	r2, [pc, #456]	; (8002eb8 <SERVO_Init+0x274>)
 8002cf0:	015b      	lsls	r3, r3, #5
 8002cf2:	4413      	add	r3, r2
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a74      	ldr	r2, [pc, #464]	; (8002ec8 <SERVO_Init+0x284>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d10c      	bne.n	8002d16 <SERVO_Init+0xd2>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfc:	4b70      	ldr	r3, [pc, #448]	; (8002ec0 <SERVO_Init+0x27c>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	4a6f      	ldr	r2, [pc, #444]	; (8002ec0 <SERVO_Init+0x27c>)
 8002d02:	f043 0310 	orr.w	r3, r3, #16
 8002d06:	6193      	str	r3, [r2, #24]
 8002d08:	4b6d      	ldr	r3, [pc, #436]	; (8002ec0 <SERVO_Init+0x27c>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	e028      	b.n	8002d68 <SERVO_Init+0x124>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOD)
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	4a67      	ldr	r2, [pc, #412]	; (8002eb8 <SERVO_Init+0x274>)
 8002d1a:	015b      	lsls	r3, r3, #5
 8002d1c:	4413      	add	r3, r2
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a6a      	ldr	r2, [pc, #424]	; (8002ecc <SERVO_Init+0x288>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d10c      	bne.n	8002d40 <SERVO_Init+0xfc>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d26:	4b66      	ldr	r3, [pc, #408]	; (8002ec0 <SERVO_Init+0x27c>)
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	4a65      	ldr	r2, [pc, #404]	; (8002ec0 <SERVO_Init+0x27c>)
 8002d2c:	f043 0320 	orr.w	r3, r3, #32
 8002d30:	6193      	str	r3, [r2, #24]
 8002d32:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <SERVO_Init+0x27c>)
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	e013      	b.n	8002d68 <SERVO_Init+0x124>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOE)
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	4a5d      	ldr	r2, [pc, #372]	; (8002eb8 <SERVO_Init+0x274>)
 8002d44:	015b      	lsls	r3, r3, #5
 8002d46:	4413      	add	r3, r2
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a61      	ldr	r2, [pc, #388]	; (8002ed0 <SERVO_Init+0x28c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10b      	bne.n	8002d68 <SERVO_Init+0x124>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d50:	4b5b      	ldr	r3, [pc, #364]	; (8002ec0 <SERVO_Init+0x27c>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	4a5a      	ldr	r2, [pc, #360]	; (8002ec0 <SERVO_Init+0x27c>)
 8002d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d5a:	6193      	str	r3, [r2, #24]
 8002d5c:	4b58      	ldr	r3, [pc, #352]	; (8002ec0 <SERVO_Init+0x27c>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	69bb      	ldr	r3, [r7, #24]
    }
	GPIO_InitStruct.Pin = SERVO_CfgParam[au16_SERVO_Instance].SERVO_PIN;
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	4a53      	ldr	r2, [pc, #332]	; (8002eb8 <SERVO_Init+0x274>)
 8002d6c:	015b      	lsls	r3, r3, #5
 8002d6e:	4413      	add	r3, r2
 8002d70:	3304      	adds	r3, #4
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	4a4c      	ldr	r2, [pc, #304]	; (8002eb8 <SERVO_Init+0x274>)
 8002d88:	015b      	lsls	r3, r3, #5
 8002d8a:	4413      	add	r3, r2
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd ffcf 	bl	8000d38 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	4a46      	ldr	r2, [pc, #280]	; (8002eb8 <SERVO_Init+0x274>)
 8002d9e:	015b      	lsls	r3, r3, #5
 8002da0:	4413      	add	r3, r2
 8002da2:	3314      	adds	r3, #20
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fb12 	bl	80003d0 <__aeabi_ui2d>
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	4b48      	ldr	r3, [pc, #288]	; (8002ed4 <SERVO_Init+0x290>)
 8002db2:	f7fd fcb1 	bl	8000718 <__aeabi_ddiv>
 8002db6:	4603      	mov	r3, r0
 8002db8:	460c      	mov	r4, r1
 8002dba:	4618      	mov	r0, r3
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	f7fd fd93 	bl	80008e8 <__aeabi_d2uiz>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	4a3b      	ldr	r2, [pc, #236]	; (8002eb8 <SERVO_Init+0x274>)
 8002dcc:	015b      	lsls	r3, r3, #5
 8002dce:	4413      	add	r3, r2
 8002dd0:	3314      	adds	r3, #20
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fd fafb 	bl	80003d0 <__aeabi_ui2d>
 8002dda:	4604      	mov	r4, r0
 8002ddc:	460d      	mov	r5, r1
 8002dde:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8002de2:	f7fd faf5 	bl	80003d0 <__aeabi_ui2d>
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <SERVO_Init+0x294>)
 8002dec:	f7fd f9b4 	bl	8000158 <__adddf3>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4610      	mov	r0, r2
 8002df6:	4619      	mov	r1, r3
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	4b37      	ldr	r3, [pc, #220]	; (8002edc <SERVO_Init+0x298>)
 8002dfe:	f7fd fb61 	bl	80004c4 <__aeabi_dmul>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4620      	mov	r0, r4
 8002e08:	4629      	mov	r1, r5
 8002e0a:	f7fd fc85 	bl	8000718 <__aeabi_ddiv>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	460c      	mov	r4, r1
 8002e12:	4618      	mov	r0, r3
 8002e14:	4621      	mov	r1, r4
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <SERVO_Init+0x294>)
 8002e1c:	f7fd f99a 	bl	8000154 <__aeabi_dsub>
 8002e20:	4603      	mov	r3, r0
 8002e22:	460c      	mov	r4, r1
 8002e24:	4618      	mov	r0, r3
 8002e26:	4621      	mov	r1, r4
 8002e28:	f7fd fd5e 	bl	80008e8 <__aeabi_d2uiz>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM1)
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <SERVO_Init+0x274>)
 8002e36:	015b      	lsls	r3, r3, #5
 8002e38:	4413      	add	r3, r2
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a28      	ldr	r2, [pc, #160]	; (8002ee0 <SERVO_Init+0x29c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d10c      	bne.n	8002e5e <SERVO_Init+0x21a>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8002e44:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <SERVO_Init+0x27c>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <SERVO_Init+0x27c>)
 8002e4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e4e:	6193      	str	r3, [r2, #24]
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <SERVO_Init+0x27c>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	e059      	b.n	8002f12 <SERVO_Init+0x2ce>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <SERVO_Init+0x274>)
 8002e62:	015b      	lsls	r3, r3, #5
 8002e64:	4413      	add	r3, r2
 8002e66:	3308      	adds	r3, #8
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6e:	d10c      	bne.n	8002e8a <SERVO_Init+0x246>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <SERVO_Init+0x27c>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <SERVO_Init+0x27c>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	61d3      	str	r3, [r2, #28]
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <SERVO_Init+0x27c>)
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	e043      	b.n	8002f12 <SERVO_Init+0x2ce>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <SERVO_Init+0x274>)
 8002e8e:	015b      	lsls	r3, r3, #5
 8002e90:	4413      	add	r3, r2
 8002e92:	3308      	adds	r3, #8
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <SERVO_Init+0x2a0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d125      	bne.n	8002ee8 <SERVO_Init+0x2a4>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <SERVO_Init+0x27c>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <SERVO_Init+0x27c>)
 8002ea2:	f043 0302 	orr.w	r3, r3, #2
 8002ea6:	61d3      	str	r3, [r2, #28]
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <SERVO_Init+0x27c>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	e02d      	b.n	8002f12 <SERVO_Init+0x2ce>
 8002eb6:	bf00      	nop
 8002eb8:	08003688 	.word	0x08003688
 8002ebc:	40010800 	.word	0x40010800
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40010c00 	.word	0x40010c00
 8002ec8:	40011000 	.word	0x40011000
 8002ecc:	40011400 	.word	0x40011400
 8002ed0:	40011800 	.word	0x40011800
 8002ed4:	41490000 	.word	0x41490000
 8002ed8:	3ff00000 	.word	0x3ff00000
 8002edc:	40490000 	.word	0x40490000
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40000400 	.word	0x40000400
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	4a61      	ldr	r2, [pc, #388]	; (8003070 <SERVO_Init+0x42c>)
 8002eec:	015b      	lsls	r3, r3, #5
 8002eee:	4413      	add	r3, r2
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a5f      	ldr	r2, [pc, #380]	; (8003074 <SERVO_Init+0x430>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10b      	bne.n	8002f12 <SERVO_Init+0x2ce>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002efa:	4b5f      	ldr	r3, [pc, #380]	; (8003078 <SERVO_Init+0x434>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	4a5e      	ldr	r2, [pc, #376]	; (8003078 <SERVO_Init+0x434>)
 8002f00:	f043 0304 	orr.w	r3, r3, #4
 8002f04:	61d3      	str	r3, [r2, #28]
 8002f06:	4b5c      	ldr	r3, [pc, #368]	; (8003078 <SERVO_Init+0x434>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	4a56      	ldr	r2, [pc, #344]	; (8003070 <SERVO_Init+0x42c>)
 8002f16:	015b      	lsls	r3, r3, #5
 8002f18:	4413      	add	r3, r2
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.Prescaler = PSC_Value;
 8002f20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f24:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f26:	2300      	movs	r3, #0
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
	htim.Init.Period = ARR_Value;
 8002f2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f30:	2300      	movs	r3, #0
 8002f32:	63fb      	str	r3, [r7, #60]	; 0x3c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f34:	2380      	movs	r3, #128	; 0x80
 8002f36:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_TIM_Base_Init(&htim);
 8002f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe fc89 	bl	8001854 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8002f4a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe fe85 	bl	8001c64 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8002f5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fcc7 	bl	80018f2 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8002f70:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff f9ce 	bl	800231c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f80:	2360      	movs	r3, #96	; 0x60
 8002f82:	677b      	str	r3, [r7, #116]	; 0x74
	sConfigOC.Pulse = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	67bb      	str	r3, [r7, #120]	; 0x78
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	4a36      	ldr	r2, [pc, #216]	; (8003070 <SERVO_Init+0x42c>)
 8002f96:	015b      	lsls	r3, r3, #5
 8002f98:	4413      	add	r3, r2
 8002f9a:	3310      	adds	r3, #16
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe fd9e 	bl	8001ae8 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 8002fac:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002fb0:	f7fd fa0e 	bl	80003d0 <__aeabi_ui2d>
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	460d      	mov	r5, r1
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	4a2d      	ldr	r2, [pc, #180]	; (8003070 <SERVO_Init+0x42c>)
 8002fbc:	015b      	lsls	r3, r3, #5
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3318      	adds	r3, #24
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd fa25 	bl	8000414 <__aeabi_f2d>
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	4b2b      	ldr	r3, [pc, #172]	; (800307c <SERVO_Init+0x438>)
 8002fd0:	f7fd fba2 	bl	8000718 <__aeabi_ddiv>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4620      	mov	r0, r4
 8002fda:	4629      	mov	r1, r5
 8002fdc:	f7fd fa72 	bl	80004c4 <__aeabi_dmul>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	460c      	mov	r4, r1
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4623      	mov	r3, r4
 8002fe8:	88fc      	ldrh	r4, [r7, #6]
 8002fea:	4610      	mov	r0, r2
 8002fec:	4619      	mov	r1, r3
 8002fee:	f7fd fc7b 	bl	80008e8 <__aeabi_d2uiz>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	4b22      	ldr	r3, [pc, #136]	; (8003080 <SERVO_Init+0x43c>)
 8002ff8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 8002ffc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8003000:	f7fd f9e6 	bl	80003d0 <__aeabi_ui2d>
 8003004:	4604      	mov	r4, r0
 8003006:	460d      	mov	r5, r1
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	4a19      	ldr	r2, [pc, #100]	; (8003070 <SERVO_Init+0x42c>)
 800300c:	015b      	lsls	r3, r3, #5
 800300e:	4413      	add	r3, r2
 8003010:	331c      	adds	r3, #28
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd f9fd 	bl	8000414 <__aeabi_f2d>
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	4b17      	ldr	r3, [pc, #92]	; (800307c <SERVO_Init+0x438>)
 8003020:	f7fd fb7a 	bl	8000718 <__aeabi_ddiv>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4620      	mov	r0, r4
 800302a:	4629      	mov	r1, r5
 800302c:	f7fd fa4a 	bl	80004c4 <__aeabi_dmul>
 8003030:	4603      	mov	r3, r0
 8003032:	460c      	mov	r4, r1
 8003034:	461a      	mov	r2, r3
 8003036:	4623      	mov	r3, r4
 8003038:	88fc      	ldrh	r4, [r7, #6]
 800303a:	4610      	mov	r0, r2
 800303c:	4619      	mov	r1, r3
 800303e:	f7fd fc53 	bl	80008e8 <__aeabi_d2uiz>
 8003042:	4603      	mov	r3, r0
 8003044:	b299      	uxth	r1, r3
 8003046:	4a0e      	ldr	r2, [pc, #56]	; (8003080 <SERVO_Init+0x43c>)
 8003048:	00a3      	lsls	r3, r4, #2
 800304a:	4413      	add	r3, r2
 800304c:	460a      	mov	r2, r1
 800304e:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	4a07      	ldr	r2, [pc, #28]	; (8003070 <SERVO_Init+0x42c>)
 8003054:	015b      	lsls	r3, r3, #5
 8003056:	4413      	add	r3, r2
 8003058:	3310      	adds	r3, #16
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fc9e 	bl	80019a4 <HAL_TIM_PWM_Start>
}
 8003068:	bf00      	nop
 800306a:	37c0      	adds	r7, #192	; 0xc0
 800306c:	46bd      	mov	sp, r7
 800306e:	bdb0      	pop	{r4, r5, r7, pc}
 8003070:	08003688 	.word	0x08003688
 8003074:	40000800 	.word	0x40000800
 8003078:	40021000 	.word	0x40021000
 800307c:	40340000 	.word	0x40340000
 8003080:	20000028 	.word	0x20000028

08003084 <SERVO_RawMove>:
	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
}

/* Moves A Specific Motor With A Raw Pulse Width Value */
void SERVO_RawMove(uint16_t au16_SERVO_Instance, uint16_t au16_Pulse)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	460a      	mov	r2, r1
 800308e:	80fb      	strh	r3, [r7, #6]
 8003090:	4613      	mov	r3, r2
 8003092:	80bb      	strh	r3, [r7, #4]
	if(au16_Pulse <= gs_SERVO_info[au16_SERVO_Instance].Period_Max && au16_Pulse >= gs_SERVO_info[au16_SERVO_Instance].Period_Min)
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	4a0d      	ldr	r2, [pc, #52]	; (80030cc <SERVO_RawMove+0x48>)
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	885b      	ldrh	r3, [r3, #2]
 800309e:	88ba      	ldrh	r2, [r7, #4]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d80e      	bhi.n	80030c2 <SERVO_RawMove+0x3e>
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	4a09      	ldr	r2, [pc, #36]	; (80030cc <SERVO_RawMove+0x48>)
 80030a8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80030ac:	88ba      	ldrh	r2, [r7, #4]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d307      	bcc.n	80030c2 <SERVO_RawMove+0x3e>
	{
		*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	4a06      	ldr	r2, [pc, #24]	; (80030d0 <SERVO_RawMove+0x4c>)
 80030b6:	015b      	lsls	r3, r3, #5
 80030b8:	4413      	add	r3, r2
 80030ba:	330c      	adds	r3, #12
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	88ba      	ldrh	r2, [r7, #4]
 80030c0:	601a      	str	r2, [r3, #0]
	}
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	20000028 	.word	0x20000028
 80030d0:	08003688 	.word	0x08003688

080030d4 <SERVO_Get_MaxPulse>:

/* Gets The Maximum Pulse Width Value For A Specific Motor */
uint16_t SERVO_Get_MaxPulse(uint16_t au16_SERVO_Instance)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	80fb      	strh	r3, [r7, #6]
	return (gs_SERVO_info[au16_SERVO_Instance].Period_Max);
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	4a04      	ldr	r2, [pc, #16]	; (80030f4 <SERVO_Get_MaxPulse+0x20>)
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	885b      	ldrh	r3, [r3, #2]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000028 	.word	0x20000028

080030f8 <SERVO_Get_MinPulse>:


/* Gets The Minimum Pulse Width Value For A Specific Motor */
uint16_t SERVO_Get_MinPulse(uint16_t au16_SERVO_Instance)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	80fb      	strh	r3, [r7, #6]
	return (gs_SERVO_info[au16_SERVO_Instance].Period_Min);
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	4a03      	ldr	r2, [pc, #12]	; (8003114 <SERVO_Get_MinPulse+0x1c>)
 8003106:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr
 8003114:	20000028 	.word	0x20000028

08003118 <MAP>:
 */

#include "MATH.h"

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	69b9      	ldr	r1, [r7, #24]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	1a8a      	subs	r2, r1, r2
 8003132:	fb02 f203 	mul.w	r2, r2, r3
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	1acb      	subs	r3, r1, r3
 800313c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	4413      	add	r3, r2
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr
	...

08003150 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);

int main(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af02      	add	r7, sp, #8
	uint16_t Servo1Pulse = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	80fb      	strh	r3, [r7, #6]
	uint16_t Servo1MaxPulse = 0, Servo1MinPulse = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	80bb      	strh	r3, [r7, #4]
 800315e:	2300      	movs	r3, #0
 8003160:	807b      	strh	r3, [r7, #2]

    HAL_Init();
 8003162:	f7fd fbe1 	bl	8000928 <HAL_Init>
    SystemClock_Config();
 8003166:	f000 f861 	bl	800322c <SystemClock_Config>
    MX_GPIO_Init();
 800316a:	f000 f8cf 	bl	800330c <MX_GPIO_Init>
    MX_USART1_UART_Init();
 800316e:	f000 f8a3 	bl	80032b8 <MX_USART1_UART_Init>
    SERVO_Init(ServoMotor1);
 8003172:	2000      	movs	r0, #0
 8003174:	f7ff fd66 	bl	8002c44 <SERVO_Init>
    HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8003178:	2201      	movs	r2, #1
 800317a:	491c      	ldr	r1, [pc, #112]	; (80031ec <main+0x9c>)
 800317c:	481c      	ldr	r0, [pc, #112]	; (80031f0 <main+0xa0>)
 800317e:	f7ff fa0a 	bl	8002596 <HAL_UART_Receive_IT>

    Servo1MinPulse = SERVO_Get_MinPulse(ServoMotor1);
 8003182:	2000      	movs	r0, #0
 8003184:	f7ff ffb8 	bl	80030f8 <SERVO_Get_MinPulse>
 8003188:	4603      	mov	r3, r0
 800318a:	807b      	strh	r3, [r7, #2]
    Servo1MaxPulse = SERVO_Get_MaxPulse(ServoMotor1);
 800318c:	2000      	movs	r0, #0
 800318e:	f7ff ffa1 	bl	80030d4 <SERVO_Get_MaxPulse>
 8003192:	4603      	mov	r3, r0
 8003194:	80bb      	strh	r3, [r7, #4]

    while (1)
    {
    	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))
 8003196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800319a:	4816      	ldr	r0, [pc, #88]	; (80031f4 <main+0xa4>)
 800319c:	f7fd ff26 	bl	8000fec <HAL_GPIO_ReadPin>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <main+0x5e>
    	{
    		TX_BUFFER[0] = '1';
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <main+0xa8>)
 80031a8:	2231      	movs	r2, #49	; 0x31
 80031aa:	701a      	strb	r2, [r3, #0]
 80031ac:	e002      	b.n	80031b4 <main+0x64>
    	}
    	else
    	{
    		TX_BUFFER[0] = '0';
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <main+0xa8>)
 80031b0:	2230      	movs	r2, #48	; 0x30
 80031b2:	701a      	strb	r2, [r3, #0]
    	}
    	HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 10);
 80031b4:	230a      	movs	r3, #10
 80031b6:	2201      	movs	r2, #1
 80031b8:	490f      	ldr	r1, [pc, #60]	; (80031f8 <main+0xa8>)
 80031ba:	480d      	ldr	r0, [pc, #52]	; (80031f0 <main+0xa0>)
 80031bc:	f7ff f959 	bl	8002472 <HAL_UART_Transmit>
    	Servo1Pulse = MAP(RX_BUFFER[0], 0, 255, Servo1MinPulse, Servo1MaxPulse);
 80031c0:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <main+0x9c>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	887a      	ldrh	r2, [r7, #2]
 80031c8:	88bb      	ldrh	r3, [r7, #4]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	22ff      	movs	r2, #255	; 0xff
 80031d0:	2100      	movs	r1, #0
 80031d2:	f7ff ffa1 	bl	8003118 <MAP>
 80031d6:	4603      	mov	r3, r0
 80031d8:	80fb      	strh	r3, [r7, #6]
    	SERVO_RawMove(ServoMotor1, Servo1Pulse);
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	4619      	mov	r1, r3
 80031de:	2000      	movs	r0, #0
 80031e0:	f7ff ff50 	bl	8003084 <SERVO_RawMove>
    	HAL_Delay(10);
 80031e4:	200a      	movs	r0, #10
 80031e6:	f7fd fc01 	bl	80009ec <HAL_Delay>
    	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))
 80031ea:	e7d4      	b.n	8003196 <main+0x46>
 80031ec:	2000002c 	.word	0x2000002c
 80031f0:	20000038 	.word	0x20000038
 80031f4:	40010c00 	.word	0x40010c00
 80031f8:	20000030 	.word	0x20000030

080031fc <HAL_UART_RxCpltCallback>:
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_UART_RxCpltCallback+0x28>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d104      	bne.n	800321a <HAL_UART_RxCpltCallback+0x1e>
	{
		HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8003210:	2201      	movs	r2, #1
 8003212:	4905      	ldr	r1, [pc, #20]	; (8003228 <HAL_UART_RxCpltCallback+0x2c>)
 8003214:	4803      	ldr	r0, [pc, #12]	; (8003224 <HAL_UART_RxCpltCallback+0x28>)
 8003216:	f7ff f9be 	bl	8002596 <HAL_UART_Receive_IT>
	}
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000038 	.word	0x20000038
 8003228:	2000002c 	.word	0x2000002c

0800322c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b090      	sub	sp, #64	; 0x40
 8003230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003232:	f107 0318 	add.w	r3, r7, #24
 8003236:	2228      	movs	r2, #40	; 0x28
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fa06 	bl	800364c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	60da      	str	r2, [r3, #12]
 800324c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800324e:	2301      	movs	r3, #1
 8003250:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003256:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003258:	2300      	movs	r3, #0
 800325a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800325c:	2301      	movs	r3, #1
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003260:	2302      	movs	r3, #2
 8003262:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800326a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800326e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003270:	f107 0318 	add.w	r3, r7, #24
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd fed1 	bl	800101c <HAL_RCC_OscConfig>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003280:	f000 f888 	bl	8003394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003284:	230f      	movs	r3, #15
 8003286:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003288:	2302      	movs	r3, #2
 800328a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	2102      	movs	r1, #2
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe f93c 	bl	800151c <HAL_RCC_ClockConfig>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80032aa:	f000 f873 	bl	8003394 <Error_Handler>
  }
}
 80032ae:	bf00      	nop
 80032b0:	3740      	adds	r7, #64	; 0x40
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <MX_USART1_UART_Init+0x4c>)
 80032be:	4a12      	ldr	r2, [pc, #72]	; (8003308 <MX_USART1_UART_Init+0x50>)
 80032c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <MX_USART1_UART_Init+0x4c>)
 80032c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80032c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032ca:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <MX_USART1_UART_Init+0x4c>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <MX_USART1_UART_Init+0x4c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <MX_USART1_UART_Init+0x4c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <MX_USART1_UART_Init+0x4c>)
 80032de:	220c      	movs	r2, #12
 80032e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <MX_USART1_UART_Init+0x4c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <MX_USART1_UART_Init+0x4c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032ee:	4805      	ldr	r0, [pc, #20]	; (8003304 <MX_USART1_UART_Init+0x4c>)
 80032f0:	f7ff f872 	bl	80023d8 <HAL_UART_Init>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80032fa:	f000 f84b 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000038 	.word	0x20000038
 8003308:	40013800 	.word	0x40013800

0800330c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003312:	f107 0310 	add.w	r3, r7, #16
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003320:	4b1a      	ldr	r3, [pc, #104]	; (800338c <MX_GPIO_Init+0x80>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	4a19      	ldr	r2, [pc, #100]	; (800338c <MX_GPIO_Init+0x80>)
 8003326:	f043 0320 	orr.w	r3, r3, #32
 800332a:	6193      	str	r3, [r2, #24]
 800332c:	4b17      	ldr	r3, [pc, #92]	; (800338c <MX_GPIO_Init+0x80>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003338:	4b14      	ldr	r3, [pc, #80]	; (800338c <MX_GPIO_Init+0x80>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	4a13      	ldr	r2, [pc, #76]	; (800338c <MX_GPIO_Init+0x80>)
 800333e:	f043 0304 	orr.w	r3, r3, #4
 8003342:	6193      	str	r3, [r2, #24]
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <MX_GPIO_Init+0x80>)
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003350:	4b0e      	ldr	r3, [pc, #56]	; (800338c <MX_GPIO_Init+0x80>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	4a0d      	ldr	r2, [pc, #52]	; (800338c <MX_GPIO_Init+0x80>)
 8003356:	f043 0308 	orr.w	r3, r3, #8
 800335a:	6193      	str	r3, [r2, #24]
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <MX_GPIO_Init+0x80>)
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800336c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003376:	f107 0310 	add.w	r3, r7, #16
 800337a:	4619      	mov	r1, r3
 800337c:	4804      	ldr	r0, [pc, #16]	; (8003390 <MX_GPIO_Init+0x84>)
 800337e:	f7fd fcdb 	bl	8000d38 <HAL_GPIO_Init>

}
 8003382:	bf00      	nop
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	40010c00 	.word	0x40010c00

08003394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_MspInit+0x5c>)
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	4a14      	ldr	r2, [pc, #80]	; (80033fc <HAL_MspInit+0x5c>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	6193      	str	r3, [r2, #24]
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_MspInit+0x5c>)
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_MspInit+0x5c>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <HAL_MspInit+0x5c>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	61d3      	str	r3, [r2, #28]
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <HAL_MspInit+0x5c>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_MspInit+0x60>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	4a04      	ldr	r2, [pc, #16]	; (8003400 <HAL_MspInit+0x60>)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	40021000 	.word	0x40021000
 8003400:	40010000 	.word	0x40010000

08003404 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003414:	d10b      	bne.n	800342e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_TIM_Base_MspInit+0x34>)
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	4a07      	ldr	r2, [pc, #28]	; (8003438 <HAL_TIM_Base_MspInit+0x34>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	61d3      	str	r3, [r2, #28]
 8003422:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_TIM_Base_MspInit+0x34>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003444:	f107 0310 	add.w	r3, r7, #16
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a20      	ldr	r2, [pc, #128]	; (80034d8 <HAL_UART_MspInit+0x9c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d139      	bne.n	80034d0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800345c:	4b1f      	ldr	r3, [pc, #124]	; (80034dc <HAL_UART_MspInit+0xa0>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <HAL_UART_MspInit+0xa0>)
 8003462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003466:	6193      	str	r3, [r2, #24]
 8003468:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <HAL_UART_MspInit+0xa0>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003474:	4b19      	ldr	r3, [pc, #100]	; (80034dc <HAL_UART_MspInit+0xa0>)
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	4a18      	ldr	r2, [pc, #96]	; (80034dc <HAL_UART_MspInit+0xa0>)
 800347a:	f043 0304 	orr.w	r3, r3, #4
 800347e:	6193      	str	r3, [r2, #24]
 8003480:	4b16      	ldr	r3, [pc, #88]	; (80034dc <HAL_UART_MspInit+0xa0>)
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800348c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003490:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	2302      	movs	r3, #2
 8003494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003496:	2303      	movs	r3, #3
 8003498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349a:	f107 0310 	add.w	r3, r7, #16
 800349e:	4619      	mov	r1, r3
 80034a0:	480f      	ldr	r0, [pc, #60]	; (80034e0 <HAL_UART_MspInit+0xa4>)
 80034a2:	f7fd fc49 	bl	8000d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b4:	f107 0310 	add.w	r3, r7, #16
 80034b8:	4619      	mov	r1, r3
 80034ba:	4809      	ldr	r0, [pc, #36]	; (80034e0 <HAL_UART_MspInit+0xa4>)
 80034bc:	f7fd fc3c 	bl	8000d38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034c0:	2200      	movs	r2, #0
 80034c2:	2100      	movs	r1, #0
 80034c4:	2025      	movs	r0, #37	; 0x25
 80034c6:	f7fd fb8a 	bl	8000bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034ca:	2025      	movs	r0, #37	; 0x25
 80034cc:	f7fd fba3 	bl	8000c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80034d0:	bf00      	nop
 80034d2:	3720      	adds	r7, #32
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40013800 	.word	0x40013800
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40010800 	.word	0x40010800

080034e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034f4:	e7fe      	b.n	80034f4 <HardFault_Handler+0x4>

080034f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034fa:	e7fe      	b.n	80034fa <MemManage_Handler+0x4>

080034fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003500:	e7fe      	b.n	8003500 <BusFault_Handler+0x4>

08003502 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003502:	b480      	push	{r7}
 8003504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003506:	e7fe      	b.n	8003506 <UsageFault_Handler+0x4>

08003508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr

08003514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003530:	f7fd fa40 	bl	80009b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003534:	bf00      	nop
 8003536:	bd80      	pop	{r7, pc}

08003538 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800353c:	4802      	ldr	r0, [pc, #8]	; (8003548 <USART1_IRQHandler+0x10>)
 800353e:	f7ff f87f 	bl	8002640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000038 	.word	0x20000038

0800354c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003550:	bf00      	nop
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr

08003558 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003558:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800355a:	e003      	b.n	8003564 <LoopCopyDataInit>

0800355c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800355e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003560:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003562:	3104      	adds	r1, #4

08003564 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003564:	480a      	ldr	r0, [pc, #40]	; (8003590 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003566:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003568:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800356a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800356c:	d3f6      	bcc.n	800355c <CopyDataInit>
  ldr r2, =_sbss
 800356e:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003570:	e002      	b.n	8003578 <LoopFillZerobss>

08003572 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003572:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003574:	f842 3b04 	str.w	r3, [r2], #4

08003578 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003578:	4b08      	ldr	r3, [pc, #32]	; (800359c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800357a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800357c:	d3f9      	bcc.n	8003572 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800357e:	f7ff ffe5 	bl	800354c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003582:	f000 f83f 	bl	8003604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003586:	f7ff fde3 	bl	8003150 <main>
  bx lr
 800358a:	4770      	bx	lr
  ldr r3, =_sidata
 800358c:	080036c8 	.word	0x080036c8
  ldr r0, =_sdata
 8003590:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003594:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003598:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800359c:	20000078 	.word	0x20000078

080035a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035a0:	e7fe      	b.n	80035a0 <ADC1_2_IRQHandler>
	...

080035a4 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80035a8:	4b14      	ldr	r3, [pc, #80]	; (80035fc <DWT_Delay_Init+0x58>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a13      	ldr	r2, [pc, #76]	; (80035fc <DWT_Delay_Init+0x58>)
 80035ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035b2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <DWT_Delay_Init+0x58>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4a10      	ldr	r2, [pc, #64]	; (80035fc <DWT_Delay_Init+0x58>)
 80035ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035be:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <DWT_Delay_Init+0x5c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0e      	ldr	r2, [pc, #56]	; (8003600 <DWT_Delay_Init+0x5c>)
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <DWT_Delay_Init+0x5c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0b      	ldr	r2, [pc, #44]	; (8003600 <DWT_Delay_Init+0x5c>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80035d8:	4b09      	ldr	r3, [pc, #36]	; (8003600 <DWT_Delay_Init+0x5c>)
 80035da:	2200      	movs	r2, #0
 80035dc:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80035de:	bf00      	nop
    __ASM volatile ("NOP");
 80035e0:	bf00      	nop
    __ASM volatile ("NOP");
 80035e2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <DWT_Delay_Init+0x5c>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80035ec:	2300      	movs	r3, #0
 80035ee:	e000      	b.n	80035f2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80035f0:	2301      	movs	r3, #1
    }
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	e000edf0 	.word	0xe000edf0
 8003600:	e0001000 	.word	0xe0001000

08003604 <__libc_init_array>:
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	2500      	movs	r5, #0
 8003608:	4e0c      	ldr	r6, [pc, #48]	; (800363c <__libc_init_array+0x38>)
 800360a:	4c0d      	ldr	r4, [pc, #52]	; (8003640 <__libc_init_array+0x3c>)
 800360c:	1ba4      	subs	r4, r4, r6
 800360e:	10a4      	asrs	r4, r4, #2
 8003610:	42a5      	cmp	r5, r4
 8003612:	d109      	bne.n	8003628 <__libc_init_array+0x24>
 8003614:	f000 f822 	bl	800365c <_init>
 8003618:	2500      	movs	r5, #0
 800361a:	4e0a      	ldr	r6, [pc, #40]	; (8003644 <__libc_init_array+0x40>)
 800361c:	4c0a      	ldr	r4, [pc, #40]	; (8003648 <__libc_init_array+0x44>)
 800361e:	1ba4      	subs	r4, r4, r6
 8003620:	10a4      	asrs	r4, r4, #2
 8003622:	42a5      	cmp	r5, r4
 8003624:	d105      	bne.n	8003632 <__libc_init_array+0x2e>
 8003626:	bd70      	pop	{r4, r5, r6, pc}
 8003628:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800362c:	4798      	blx	r3
 800362e:	3501      	adds	r5, #1
 8003630:	e7ee      	b.n	8003610 <__libc_init_array+0xc>
 8003632:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003636:	4798      	blx	r3
 8003638:	3501      	adds	r5, #1
 800363a:	e7f2      	b.n	8003622 <__libc_init_array+0x1e>
 800363c:	080036c0 	.word	0x080036c0
 8003640:	080036c0 	.word	0x080036c0
 8003644:	080036c0 	.word	0x080036c0
 8003648:	080036c4 	.word	0x080036c4

0800364c <memset>:
 800364c:	4603      	mov	r3, r0
 800364e:	4402      	add	r2, r0
 8003650:	4293      	cmp	r3, r2
 8003652:	d100      	bne.n	8003656 <memset+0xa>
 8003654:	4770      	bx	lr
 8003656:	f803 1b01 	strb.w	r1, [r3], #1
 800365a:	e7f9      	b.n	8003650 <memset+0x4>

0800365c <_init>:
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	bf00      	nop
 8003660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003662:	bc08      	pop	{r3}
 8003664:	469e      	mov	lr, r3
 8003666:	4770      	bx	lr

08003668 <_fini>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	bf00      	nop
 800366c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366e:	bc08      	pop	{r3}
 8003670:	469e      	mov	lr, r3
 8003672:	4770      	bx	lr
